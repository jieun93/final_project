package ERP.service.emp;

import java.io.File;
import java.io.IOException;
import java.lang.annotation.Target;
import java.util.List;
import java.util.Properties;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.ServletContext;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.multipart.MultipartFile;

import ERP.dao.emp.IEmployeeDAO;
import enums.ServiceResult;
import exception.DataNotFoundException;
import vo.PagingVO;
import vo.emp.DepartmentVO;
import vo.emp.EMP_CertVO;
import vo.emp.EmployeeVO;
import vo.emp.Salary_TransVO;
@Service
public class EmployeeServieceImp implements IEmployeeService {
	@Inject
	WebApplicationContext container;
	ServletContext application;
	
	@Value("#{appInfo.empImgePath}") // src/main/resources appInfo.proterties에 등록된 파일을 저장할 경로를 
	String empImgePath;
	File saveFolder;
	
	@Inject
	private IEmployeeDAO dao;

	@PostConstruct
	public void init() {
		application = container.getServletContext();
		String folderPath = application.getRealPath(empImgePath); // 이미지의 경로를 받아서 저장 폴더 변수 명에 넣어주는거 
		saveFolder = new File(folderPath);
		if(!saveFolder.exists()) {saveFolder.mkdirs(); }
		// 폴더가 존재 하지 않으면  saveFoler파일를 폴더를 생성하는거ㅓ   
		//mkdirs --> c드라이브에 temp라는 폴더가 없는 경우temp폴더를 생성하고 그안에 log폴더를 생성 
	}
	
	
	private void processImage(EmployeeVO emp) { // 파일 저장하는거 
		try {
			MultipartFile emp_img = emp.getEmp_img();
			if(emp_img != null) { // 이미지가 있으면 
				emp.saveFile(saveFolder);
			}
		}catch (IOException e) {
			throw new RuntimeException(e);
		}
	}
	
	
	// 사원 등록 
	@Transactional
	@Override
	public ServiceResult createEmployee(EmployeeVO vo) {
		ServiceResult result = null;
		int cerNoPK = dao.selectCerNO();	//마지막 pk+1값
		int cerSize = vo.getEmpCertVOList().size();
		if(cerSize!=0) {
			for(EMP_CertVO cer : vo.getEmpCertVOList()) {
				cer.setCert_no(cerNoPK++);	//empCertVOList의 PK를 넣어줌
			}
		}
		
		
		
		// 사원등록 
		int id = dao.insertEmployee(vo); 
		
		processImage(vo);
		// 메소드 processImage에 값 넘겨주는거 , 사진을 폴더에 저장하는거  vo에는 emp_no가 없어서 사원번호가 먼저 만들어지고 이미지를 저장해야 하는거 
		try {
			sendMail(vo);
		} catch (MessagingException e) {
			e.printStackTrace();
		}
		if(id > 0) {
			result = ServiceResult.OK;
		}else {
			result = ServiceResult.FAIL;
		}
		
		String depNa = dao.departName(vo);
		String depNo = dao.deparNo(vo);
		
		DepartmentVO dvo = new DepartmentVO();
		dvo.setDep_name(depNa);
		dvo.setDep_no(depNo);
		vo.setDepVO(dvo);
		
		 
		return result;
	}
	
	// 사원 등록 후 메일로 보내질 내용 
		private String sendMail(EmployeeVO vo) throws AddressException, MessagingException {
			String host = "smtp.naver.com";
			// 회사에서 보내는거 
			final String username = "jungjuhwan10"; //네이버 아이디를 입력해주세요. @nave.com은 입력하지 마시구요. 
			final String password = "090722vvss"; //네이버 이메일 비밀번호를 입력해주세요. 
			int port=465; //포트번호
			
			// 메일 내용 
			String recipient = vo.getEmp_email(); //받는 사람의 메일주소를 입력해주세요. @naver.com을 포함해서 작성해야 함
			String subject = "HnJERP"; //메일 제목 입력해주세요. 
			String body = username+"님으로 부터 메일을 받았습니다."+
								vo.getEmp_name()+" 님의  사원 id와 비밀번호입니다."+
								"사원 id :"+vo.getEmp_no()+"임시 비밀번호는 "+vo.getEmp_pass(); //메일 내용 입력해주세요.
			Properties props = System.getProperties(); // 정보를 담기 위한 객체 생성 // SMTP 서버 정보 설정 
			props.put("mail.smtp.host", host); 
			props.put("mail.smtp.port", port); 
			props.put("mail.smtp.auth", "true"); 
			props.put("mail.smtp.ssl.enable", "true"); 
			props.put("mail.smtp.ssl.trust", host);
			 //Session 생성 
			Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
			 String un = username;
			 String pw = password;
			 protected javax.mail.PasswordAuthentication getPasswordAuthentication() { 
				return new javax.mail.PasswordAuthentication(un, pw);
				 }
			 });
			 session.setDebug(true); //for debug 
			Message mimeMessage = new MimeMessage(session); //MimeMessage 생성
			mimeMessage.setFrom(new InternetAddress("jungjuhwan10@naver.com")); //발신자 셋팅 , 보내는 사람의 이메일주소를 한번 더 입력합니다. 이때는 이메일 풀 주소를 다 작성해주세요. 
			mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress(recipient)); //수신자셋팅 //.TO 외에 .CC(참조) .BCC(숨은참조) 도 있음
			mimeMessage.setSubject(subject); //제목셋팅 
			mimeMessage.setText(body); //내용셋팅 
			Transport.send(mimeMessage); //javax.mail.Transport.send() 이용 
				
				ServiceResult result = null;
				String str = result == ServiceResult.OK ? "전송완료" : "전송실패";
						
				return  str;
		}

	// 모달에서 employee 수정 - update랑 insert 하는거 
	@Override
	@Transactional
	public ServiceResult modifyEmployee(EmployeeVO vo) {
		System.out.println(vo);
		ServiceResult result = null;
//		EmployeeVO saveEmp = readEmployee(vo.getEmp_no());
		 	processImage(vo); // 이미지 저장
		 
			int cnt  = dao.updateEmployee(vo); 
		
			if(cnt>0) {
				result = ServiceResult.OK; 
			}else {
				result = ServiceResult.FAIL; 
			}
			
			// 추가한 사항이 있으면 행을 인서트하는거 
			if((vo.getEmpCertVOList() != null)||(vo.getCareerVOList() !=null)||(vo.getEduVOList() !=null)) { 
			
			
			// 자격증 번호 cert_no pk를 불러오는거	
			 int cert_no = 	dao.selectCerNO(); 
			 // 자격증이 있는 만큼 돌리는거 
			 if(vo.getEmpCertVOList()!=null) {
				 // 자격증이 있으면
			 for(int i =0;  i < vo.getEmpCertVOList().size(); i++) { // 자격증의 갯수만큼 for문
				 vo.getEmpCertVOList().get(i).setCert_no(cert_no++);  // 자격증의 번호를 1씩중가 
			 	}
			 	dao.insertCer(vo); // 자격증을 dao에 넣어줌
			 	
			 }
			 
		
			 
			}
			
			
		if(vo.getEmp_img() !=null && StringUtils.isNotBlank(vo.getEmp_img().getOriginalFilename())) processImage(vo);	
		return result;
		
	}


	
	// 사원한명으 정보를 불러오는거 
	@Override
	public EmployeeVO readEmployee(String emp_no) {
		EmployeeVO emp = dao.selectEmployee(emp_no);
		List<Salary_TransVO> transList = dao.selectSalaryList(emp_no);
		emp.setTransList(transList);
		
		if(emp == null ) throw new DataNotFoundException(emp_no +"해당하는 사원이 없습니다.");
		return emp;
	}

	
	

	//사원리스트 나오
	@Override
	public List<EmployeeVO> readEmployeeList(PagingVO<EmployeeVO> pagingVO) {
		return dao.selectEmployeeList(pagingVO);
	}

	
	@Override
	public int readEmpListCount(PagingVO<EmployeeVO> paingVO) {
		return dao.selectEmpCount(paingVO);
	}



	
	// 모달 자격증은 트리거에서 삭제 하는거 
	// 모달에서 자격증 추가 
	// 사원을 등록할때 하는거 
	public ServiceResult creatModalCert(EmployeeVO vo) {
		ServiceResult result = dao.insertEmployee(vo)>0 ? ServiceResult.OK : ServiceResult.FAIL;
		return result;
	}


	// 비밀번호 업뎃 
	@Override
	public ServiceResult modifyPW(EmployeeVO vo) {
		// 입력받은 아이디와 이메일이 같으면 이메일을 전송
		// 입력받은 아이디와 이메일이 같지 않으면 제자리로 
		
		
		ServiceResult result = dao.update_pw(vo)>0 ?ServiceResult.OK : ServiceResult.FAIL;
		return result;
	}

}
