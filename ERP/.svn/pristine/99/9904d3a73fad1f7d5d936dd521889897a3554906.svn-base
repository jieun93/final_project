<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ERP.dao.emp.INoticeDAO">
	<sql id="searchFrag">
		FROM NOTICE A INNER JOIN EMPLOYEE B ON(A.EMP_NO = B.EMP_NO)
		<where>
			<if test="searchVO!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchWord)">
				<choose>
					<when test="'title'.equals(searchVO.searchType)">
						INSTR(NOTICE_TITLE, #{searchVO.searchWord}) > 0
					</when>
					<when test="'writer'.equals(searchVO.searchType)">
						INSTR(B.EMP_NAME, #{searchVO.searchWord}) > 0
					</when>
					<when test="'content'.equals(searchVO.searchType)">
						INSTR(NOTICE_CONTENT, #{searchVO.searchWord}) > 0
					</when>
					<otherwise>
						INSTR(NOTICE_TITLE, #{searchVO.searchWord}) > 0
						OR INSTR(B.EMP_NAME, #{searchVO.searchWord}) > 0
						OR INSTR(NOTICE_CONTENT, #{searchVO.searchWord}) > 0
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>
	<select id="selectNoticeCount" resultType="int" parameterType="PagingVO">
		SELECT COUNT(NOTICE_NO)
		<include refid="searchFrag" />
	</select>
	
	<select id="selectNoticeList" resultType="NoticeVO" parameterType="PagingVO">
    SELECT C.*
		FROM(
			SELECT  ROWNUM RNUM, A.NOTICE_NO, B.EMP_NAME, A.NOTICE_TITLE,
					A.NOTICE_DATE, A.NOTICE_CONTENT, A.NOTICE_VIEW
			<include refid="searchFrag"></include>
		) C
		WHERE RNUM BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<resultMap type="NoticeVO" id="noticeMap" autoMapping="true">
		<id property="notice_no" column="notice_no"/>
		<collection property="attatchList" javaType="java.util.List" ofType="AttatchVO" autoMapping="true" />
	</resultMap>
	
	<select id="selectNotice" parameterType="int" resultMap="noticeMap">
		SELECT  A.NOTICE_NO, A.EMP_NO, A.NOTICE_TITLE, A.NOTICE_DATE,
				A.NOTICE_CONTENT, A.NOTICE_VIEW, C.EMP_NAME,
				B.ATTATCH_CODE ATT_NO , B.ATTATCH_NAME
		FROM NOTICE A LEFT OUTER JOIN ATTATCH B ON (A.NOTICE_NO = B.NOTICE_NO)
					  INNER JOIN EMPLOYEE C ON (A.EMP_NO = C.EMP_NO)
		WHERE A.NOTICE_NO = #{notice_no}	    
	</select>
	
	<update id="incrementHit" parameterType="int">
		UPDATE NOTICE
		SET NOTICE_VIEW = NOTICE_VIEW+1
		WHERE NOTICE_NO = #{notice_no}
	</update>
	
	<insert id="insertNotice" parameterType="NoticeVO">
		<selectKey resultType="int" keyProperty="notice_no" order="BEFORE">
			SELECT NVL(MAX(notice_no), 0)+1 FROM NOTICE
		</selectKey>
		INSERT INTO NOTICE (
		    NOTICE_NO, EMP_NO, NOTICE_TITLE, 
			NOTICE_DATE, NOTICE_CONTENT, NOTICE_VIEW
<!-- 		    <if test="bo_parent!=null and bo_parent gt 0"> -->
<!-- 		    	, BO_PARENT -->
<!-- 		    </if> -->
		) VALUES (
		    #{notice_no},    #{emp_no,jdbcType=VARCHAR}, #{notice_title,jdbcType=VARCHAR},
		    SYSDATE,    #{notice_content,jdbcType=CLOB},   0
<!-- 		    <if test="bo_parent!=null and bo_parent gt 0"> -->
<!-- 		    	, #{bo_parent} -->
<!-- 		    </if> -->
		)
	</insert>
	
	<update id="updateNotice" parameterType="NoticeVO">
		UPDATE NOTICE
		    SET
		    NOTICE_TITLE = #{notice_title,jdbcType=VARCHAR},
		    EMP_NO =#{emp_no,jdbcType=VARCHAR},
		    NOTICE_CONTENT =#{notice_content,jdbcType=CLOB}
		WHERE
		    NOTICE_NO = #{notice_no,jdbcType=NUMERIC}
	</update>
	
	<delete id="deleteNotice" parameterType="NoticeVO">
		DELETE FROM NOTICE
		WHERE notice_no = #{notice_no}
		
		<!--  IN (
		    SELECT notice_no
		    FROM NOTICE
		    START WITH notice_no = #{notice_no} -->
<!-- 		    CONNECT BY PRIOR BO_NO = BO_PARENT -->
		
	</delete>
</mapper>













